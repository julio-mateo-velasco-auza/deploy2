---
// /privado — landing privada (sin SSR cookies, sin CORS)
export const prerender = true;

import Base from '../layouts/Base.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import HomeHero from '../components/HomeHero.astro';

const PAGE_TITLE = 'Inbolsa — Zona privada';
---
<Base title={PAGE_TITLE}>
  <Header />

  <main>
    <section class="relative">
      <HomeHero />
    </section>

    <section class="mx-auto max-w-6xl px-4 py-12">
      <div class="grid gap-8 md:grid-cols-3">
        <div>
          <h3 class="text-xl font-semibold">Productos (zona privada)</h3>
          <p class="mt-2 text-slate-600">Accede al catálogo privado habilitado por tu QR.</p>
          <div class="mt-3">
            <a href="/productos" class="underline">Ver productos</a>
          </div>
        </div>
        <div>
          <h3 class="text-xl font-semibold">Industrias</h3>
          <p class="mt-2 text-slate-600">Contenido privado para industrias clave.</p>
        </div>
        <div>
          <h3 class="text-xl font-semibold">Historia</h3>
          <p class="mt-2 text-slate-600">Mensaje exclusivo para visitantes con QR.</p>
        </div>
      </div>
    </section>
  </main>

  <Footer />

  <script type="module">
    import { enablePrivate, setGrantProducts, disablePrivate, checkAccessValid } from '/inbolsaNeo/lib/privado.js';
    import { api } from '/inbolsaNeo/lib/api.js';

    (async function() {
      try {
        // 1. Procesar token si viene en URL
        const params = new URLSearchParams(location.search);
        const token = params.get('accessToken');
        const productsParam = params.get('p');
        
        console.log("Token:", token ? "Presente" : "No presente");
        console.log("Productos en URL:", productsParam);
        
        if (token) {
          console.log("Habilitando acceso privado");
          enablePrivate(120);
          
          if (productsParam) {
            const productIds = productsParam.split(',').filter(Boolean);
            console.log("Guardando productos desde URL:", productIds);
            setGrantProducts(productIds);
          } else {
            try {
              console.log("Consultando payload del backend");
              const payload = await api.accessPayload(token);
              console.log("Payload recibido:", payload);
              
              if (payload?.qr?.payload) {
                const p = payload.qr.payload;
                if (p.section === 'productos') {
                  if (p.allow === 'include' && Array.isArray(p.products)) {
                    console.log("Guardando productos del payload:", p.products);
                    setGrantProducts(p.products);
                  }
                }
              }
            } catch(error) {
              console.error('Error al procesar token:', error);
            }
          }
          
          history.replaceState({}, document.title, '/privado');
        }
        
        // 2. Verificar que tengamos acceso privado
        const isPrivate = localStorage.getItem('inbolsa:qr:ok') === '1' ||
                         document.cookie.split(';').some(c => c.trim().startsWith('inbolsa:qr:ok=')) ||
                         document.cookie.split(';').some(c => c.trim().startsWith('qrauth=')) ||
                         document.cookie.split(';').some(c => c.trim().startsWith('inb_access='));
        
        if (!isPrivate) {
          console.log("No hay acceso privado, redirigiendo...");
          location.href = '/';
          return;
        }
        
        console.log("Acceso privado verificado");
        
        // 3. Verificar periódicamente si el acceso sigue válido
        async function verifyAccess() {
          try {
            console.log("Verificando validez del acceso en privado...");
            const isValid = await checkAccessValid();
            
            if (!isValid) {
              console.log("Acceso revocado, redirigiendo...");
              disablePrivate();
              window.location.href = '/';
            }
          } catch (e) {
            console.error("Error verificando acceso:", e);
          }
        }

        // Verificar cada 15 segundos
        setInterval(verifyAccess, 15000);
        
        // Primera verificación después de 3 segundos
        setTimeout(verifyAccess, 3000);
        
      } catch (e) {
        console.error('Error en inicialización privado:', e);
      }
    })();
  </script>
</Base>