---
// WhatsAppAdmin.astro - Versión PHP adaptada para inbolsaNeo
// Este componente debe colocarse en una ruta protegida dentro de tu aplicación

import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

// Parámetros opcionales
const {
  title = "Panel de Administración de WhatsApp",
  refreshInterval = 30000 // Intervalo de actualización en ms (30 segundos por defecto)
} = Astro.props;

// Base path para API (ajustado para inbolsaNeo)
const basePath = import.meta.env.PUBLIC_BASE_URL || "/inbolsaNeo";
---

<html lang="es">
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href={`${basePath}/favicon.svg`} />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <meta name="generator" content={Astro.generator} />
  <title>{title} | Inbolsa</title>
</head>
<body>
  <Header />

  <main class="container">
    <h1 class="page-title">{title}</h1>
    
    <div class="whatsapp-admin" data-base-path={basePath} data-refresh-interval={refreshInterval}>
      <div class="sidebar">
        <div class="sidebar-header">
          <h2>Conversaciones</h2>
          <div class="search-container">
            <input type="text" id="conversation-search" placeholder="Buscar conversación..." />
            <button id="refresh-btn" title="Actualizar">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41zm-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9z"/>
                <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5.002 5.002 0 0 0 8 3zM3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9H3.1z"/>
              </svg>
            </button>
          </div>
        </div>
        
        <div class="conversation-filters">
          <button data-filter="all" class="active">Todas</button>
          <button data-filter="new">Nuevas</button>
          <button data-filter="attention">Atención</button>
          <button data-filter="in-progress">En proceso</button>
          <button data-filter="resolved">Resueltas</button>
        </div>
        
        <div class="conversation-list" id="conversation-list">
          <!-- Las conversaciones se cargarán aquí mediante JavaScript -->
          <div class="loading-placeholder">
            <div class="spinner"></div>
            <p>Cargando conversaciones...</p>
          </div>
        </div>
      </div>
      
      <div class="chat-container">
        <div class="empty-state" id="empty-state">
          <div class="empty-state-icon">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" viewBox="0 0 16 16">
              <path d="M13.601 2.326A7.854 7.854 0 0 0 7.994 0C3.627 0 .068 3.558.064 7.926c0 1.399.366 2.76 1.057 3.965L0 16l4.204-1.102a7.933 7.933 0 0 0 3.79.965h.004c4.368 0 7.926-3.558 7.93-7.93A7.898 7.898 0 0 0 13.6 2.326zM7.994 14.521a6.573 6.573 0 0 1-3.356-.92l-.24-.144-2.494.654.666-2.433-.156-.251a6.56 6.56 0 0 1-1.007-3.505c0-3.626 2.957-6.584 6.591-6.584a6.56 6.56 0 0 1 4.66 1.931 6.557 6.557 0 0 1 1.928 4.66c-.004 3.639-2.961 6.592-6.592 6.592zm3.615-4.934c-.197-.099-1.17-.578-1.353-.646-.182-.065-.315-.099-.445.099-.133.197-.513.646-.627.775-.114.133-.232.148-.43.05-.197-.1-.836-.308-1.592-.985-.59-.525-.985-1.175-1.103-1.372-.114-.198-.011-.304.088-.403.087-.088.197-.232.296-.346.1-.114.133-.198.198-.33.065-.134.034-.248-.015-.347-.05-.099-.445-1.076-.612-1.47-.16-.389-.323-.335-.445-.34-.114-.007-.247-.007-.38-.007a.729.729 0 0 0-.529.247c-.182.198-.691.677-.691 1.654 0 .977.71 1.916.81 2.049.098.133 1.394 2.132 3.383 2.992.47.205.84.326 1.129.418.475.152.904.129 1.246.08.38-.058 1.171-.48 1.338-.943.164-.464.164-.86.114-.943-.049-.084-.182-.133-.38-.232z"/>
            </svg>
          </div>
          <h3>Panel de WhatsApp</h3>
          <p>Selecciona una conversación para comenzar a responder</p>
        </div>
        
        <div class="chat-view hidden" id="chat-view">
          <div class="chat-header">
            <div class="chat-contact-info">
              <div class="contact-avatar">
                <!-- Placeholder para primera letra del nombre o número -->
                <span id="contact-initial">?</span>
              </div>
              <div class="contact-details">
                <h3 id="contact-name">Contacto</h3>
                <p id="contact-phone">+0000000000</p>
              </div>
            </div>
            
            <div class="chat-actions">
              <select id="status-selector">
                <option value="new">Nueva</option>
                <option value="in-progress">En proceso</option>
                <option value="resolved">Resuelta</option>
                <option value="follow-up">Seguimiento</option>
              </select>
              
              <button id="assign-btn" title="Asignar conversación">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M7 14s-1 0-1-1 1-4 5-4 5 3 5 4-1 1-1 1H7Zm4-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6Zm-5.784 6A2.238 2.238 0 0 1 5 13c0-1.355.68-2.75 1.936-3.72A6.325 6.325 0 0 0 5 9c-4 0-5 3-5 4s1 1 1 1h4.216ZM4.5 8a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"/>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="chat-messages" id="chat-messages">
            <!-- Los mensajes se cargarán aquí mediante JavaScript -->
          </div>
          
          <div class="chat-input">
            <textarea id="message-input" placeholder="Escribe un mensaje..."></textarea>
            <div class="input-actions">
              <button id="send-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                  <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.75.75 0 0 1-1.329.124l-3.178-4.995L.643 7.184a.75.75 0 0 1 .124-1.33L15.314.037a.5.5 0 0 1 .54.11ZM6.636 10.07l2.761 4.338L14.13 2.576 6.636 10.07Zm6.787-8.201L1.591 6.602l4.339 2.76 7.494-7.493Z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Modal para asignar conversación -->
      <div class="modal" id="assign-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>Asignar conversación</h3>
            <button class="modal-close">&times;</button>
          </div>
          <div class="modal-body">
            <p>Selecciona un agente para asignar esta conversación:</p>
            <select id="agent-selector">
              <option value="">Seleccionar agente...</option>
              <!-- Las opciones se cargarán desde el servidor -->
            </select>
          </div>
          <div class="modal-footer">
            <button class="cancel-btn">Cancelar</button>
            <button class="confirm-btn">Asignar</button>
          </div>
        </div>
      </div>
    </div>
  </main>

  <Footer />

  <script>
    // Constantes y variables
    const admin = document.querySelector('.whatsapp-admin');
    const BASE_PATH = admin?.getAttribute('data-base-path') || '/inbolsaNeo';
    const API_URL = `${BASE_PATH}/inbolsa-api/whatsapp`; // Ruta a la API de WhatsApp
    const REFRESH_INTERVAL = parseInt(admin?.getAttribute('data-refresh-interval') || '30000');
    let currentPhone = null;
    let refreshTimer = null;
    
    // Elementos DOM
    const conversationList = document.getElementById('conversation-list');
    const chatView = document.getElementById('chat-view');
    const emptyState = document.getElementById('empty-state');
    const chatMessages = document.getElementById('chat-messages');
    const messageInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const refreshBtn = document.getElementById('refresh-btn');
    const searchInput = document.getElementById('conversation-search');
    const filterButtons = document.querySelectorAll('.conversation-filters button');
    const assignBtn = document.getElementById('assign-btn');
    const assignModal = document.getElementById('assign-modal');
    const agentSelector = document.getElementById('agent-selector');
    const statusSelector = document.getElementById('status-selector');
    
    // Elementos para info de contacto
    const contactInitial = document.getElementById('contact-initial');
    const contactName = document.getElementById('contact-name');
    const contactPhone = document.getElementById('contact-phone');
    
    // Inicialización
    document.addEventListener('DOMContentLoaded', () => {
      if (!admin) return;
      
      // Cargar conversaciones al inicio
      loadConversations();
      
      // Configurar refresco automático
      startRefreshTimer();
      
      // Event listeners
      setupEventListeners();
    });
    
    // Configurar event listeners
    function setupEventListeners() {
      if (!sendBtn || !messageInput || !refreshBtn || !searchInput) return;
      
      // Botón de enviar mensaje
      sendBtn.addEventListener('click', sendMessage);
      
      // Enviar mensaje con Enter (Shift+Enter para nueva línea)
      messageInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          sendMessage();
        }
      });
      
      // Botón de refresco manual
      refreshBtn.addEventListener('click', () => {
        refreshBtn.classList.add('rotating');
        loadConversations().then(() => {
          setTimeout(() => refreshBtn.classList.remove('rotating'), 500);
        });
      });
      
      // Búsqueda de conversaciones
      searchInput.addEventListener('input', filterConversations);
      
      // Filtros de conversaciones
      filterButtons.forEach(button => {
        button.addEventListener('click', () => {
          // Remover clase activa de todos los botones
          filterButtons.forEach(btn => btn.classList.remove('active'));
          // Añadir clase activa al botón clickeado
          button.classList.add('active');
          // Aplicar filtro
          applyConversationFilter(button.getAttribute('data-filter'));
        });
      });
      
      // Modal de asignación
      if (assignBtn && assignModal) {
        assignBtn.addEventListener('click', () => {
          // Abrir modal
          assignModal.classList.add('show');
          // Cargar agentes
          loadAgents();
        });
        
        // Cerrar modal
        document.querySelectorAll('.modal-close, .cancel-btn').forEach(elem => {
          elem.addEventListener('click', () => {
            assignModal.classList.remove('show');
          });
        });
        
        // Confirmar asignación
        document.querySelector('.confirm-btn')?.addEventListener('click', () => {
          const agentId = agentSelector.value;
          if (agentId && currentPhone) {
            assignConversation(currentPhone, agentId);
            assignModal.classList.remove('show');
          }
        });
      }
      
      // Cambio de estado
      if (statusSelector) {
        statusSelector.addEventListener('change', () => {
          if (currentPhone) {
            updateConversationStatus(currentPhone, statusSelector.value);
          }
        });
      }
    }
    
    // Cargar conversaciones
    async function loadConversations() {
      if (!conversationList) return;
      
      try {
        // Obtener token de sesión (ajustar según tu sistema de autenticación)
        const token = getAuthToken();
        
        const response = await fetch(`${API_URL}/conversations`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!response.ok) throw new Error(`Error al cargar conversaciones: ${response.status}`);
        
        const data = await response.json();
        
        if (data.success) {
          renderConversationList(data.data);
        } else {
          console.error('Error en respuesta:', data.error);
        }
      } catch (error) {
        console.error('Error al cargar conversaciones:', error);
        conversationList.innerHTML = `
          <div class="error-state">
            <p>Error al cargar conversaciones</p>
            <button id="retry-btn">Reintentar</button>
          </div>
        `;
        document.getElementById('retry-btn')?.addEventListener('click', loadConversations);
      }
    }
    
    // Renderizar lista de conversaciones
    function renderConversationList(conversations) {
      if (!conversationList) return;
      
      if (!conversations || conversations.length === 0) {
        conversationList.innerHTML = `
          <div class="empty-list">
            <p>No hay conversaciones activas</p>
          </div>
        `;
        return;
      }
      
      const activeFilter = document.querySelector('.conversation-filters button.active')?.getAttribute('data-filter') || 'all';
      const searchTerm = searchInput?.value.toLowerCase() || '';
      
      // Filtrar conversaciones según filtro activo y término de búsqueda
      const filteredConversations = conversations.filter(convo => {
        const matchesFilter = 
          activeFilter === 'all' ||
          (activeFilter === 'new' && convo.status === 'new') ||
          (activeFilter === 'attention' && convo.requires_human_attention == 1) ||
          (activeFilter === 'in-progress' && convo.status === 'in-progress') ||
          (activeFilter === 'resolved' && convo.status === 'resolved');
        
        const matchesSearch = 
          !searchTerm || 
          (convo.phone && convo.phone.includes(searchTerm)) ||
          (convo.customer_name && convo.customer_name.toLowerCase().includes(searchTerm));
        
        return matchesFilter && matchesSearch;
      });
      
      if (filteredConversations.length === 0) {
        conversationList.innerHTML = `
          <div class="empty-list">
            <p>No hay conversaciones que coincidan con los filtros</p>
          </div>
        `;
        return;
      }
      
      conversationList.innerHTML = filteredConversations.map(convo => {
        const lastMessageTime = convo.lastMessage ? new Date(convo.lastMessage.timestamp) : new Date(convo.last_interaction);
        const timeString = formatMessageTime(lastMessageTime);
        
        const lastMessageText = convo.lastMessage ? truncateText(convo.lastMessage.message, 40) : 'Nueva conversación';
        
        const customerName = convo.customer_name || 'Cliente';
        const initial = customerName.charAt(0).toUpperCase();
        
        let statusClass = '';
        if (convo.requires_human_attention == 1) statusClass = 'needs-attention';
        else if (convo.status === 'new') statusClass = 'new';
        else if (convo.status === 'in-progress') statusClass = 'in-progress';
        else if (convo.status === 'resolved') statusClass = 'resolved';
        
        let assignedBadge = '';
        if (convo.assigned_to) {
          assignedBadge = `<span class="assigned-badge" title="Asignado a: ${convo.assigned_to}">👤</span>`;
        }
        
        return `
          <div class="conversation-item ${statusClass}" data-phone="${convo.phone}">
            <div class="avatar">
              <span>${initial}</span>
            </div>
            <div class="conversation-info">
              <div class="conversation-header">
                <h4>${customerName}</h4>
                <span class="time">${timeString}</span>
              </div>
              <p class="last-message">${lastMessageText}</p>
              <div class="conversation-meta">
                <span class="phone">${formatPhone(convo.phone)}</span>
                ${assignedBadge}
              </div>
            </div>
          </div>
        `;
      }).join('');
      
      // Añadir event listeners a las conversaciones
      document.querySelectorAll('.conversation-item').forEach(item => {
        item.addEventListener('click', () => {
          // Desactivar selección previa
          document.querySelectorAll('.conversation-item.active').forEach(
            active => active.classList.remove('active')
          );
          
          // Activar selección actual
          item.classList.add('active');
          
          // Cargar conversación
          const phone = item.getAttribute('data-phone');
          if (phone) loadConversation(phone);
        });
      });
      
      // Si hay una conversación activa, mantener la selección
      if (currentPhone) {
        const activeItem = document.querySelector(`.conversation-item[data-phone="${currentPhone}"]`);
        if (activeItem) {
          activeItem.classList.add('active');
        }
      }
    }
    
    // Cargar una conversación específica
    async function loadConversation(phone) {
      if (!chatMessages || !chatView || !emptyState) return;
      
      try {
        currentPhone = phone;
        
        // Mostrar pantalla de carga
        chatMessages.innerHTML = `
          <div class="loading-messages">
            <div class="spinner"></div>
            <p>Cargando mensajes...</p>
          </div>
        `;
        
        // Mostrar vista de chat
        emptyState.classList.add('hidden');
        chatView.classList.remove('hidden');
        
        // Obtener token de sesión
        const token = getAuthToken();
        
        // Cargar datos
        const response = await fetch(`${API_URL}/conversation/${phone}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        if (!response.ok) throw new Error(`Error al cargar conversación: ${response.status}`);
        
        const data = await response.json();
        
        if (data.success) {
          // Actualizar interfaz con datos de la conversación
          renderConversation(data.data);
        } else {
          console.error('Error en respuesta:', data.error);
          chatMessages.innerHTML = `
            <div class="error-state">
              <p>Error al cargar mensajes</p>
              <button onclick="loadConversation('${phone}')">Reintentar</button>
            </div>
          `;
        }
      } catch (error) {
        console.error('Error al cargar conversación:', error);
        chatMessages.innerHTML = `
          <div class="error-state">
            <p>Error al cargar mensajes</p>
            <button onclick="loadConversation('${phone}')">Reintentar</button>
          </div>
        `;
      }
    }
    
    // Renderizar una conversación
    function renderConversation(data) {
      if (!chatMessages || !contactPhone || !contactName || !contactInitial || !statusSelector) return;
      
      const { messages, session } = data;
      
      // Actualizar información de contacto
      contactPhone.textContent = formatPhone(session.phone);
      
      const customerName = session.customer_name || 'Cliente';
      contactName.textContent = customerName;
      contactInitial.textContent = customerName.charAt(0).toUpperCase();
      
      // Actualizar selector de estado
      statusSelector.value = session.status || 'new';
      
      // Renderizar mensajes
      if (!messages || messages.length === 0) {
        chatMessages.innerHTML = `
          <div class="empty-messages">
            <p>No hay mensajes en esta conversación</p>
          </div>
        `;
        return;
      }
      
      // Agrupar mensajes por día
      const groupedMessages = groupMessagesByDate(messages);
      
      let html = '';
      
      // Renderizar cada grupo de mensajes
      Object.entries(groupedMessages).forEach(([date, msgs]) => {
        html += `<div class="message-date-separator"><span>${date}</span></div>`;
        
        msgs.forEach(msg => {
          const isOutgoing = msg.direction === 'outgoing';
          const time = formatMessageTime(new Date(msg.timestamp));
          
          html += `
            <div class="message ${isOutgoing ? 'outgoing' : 'incoming'}">
              <div class="message-content">
                <p>${formatMessageText(msg.message)}</p>
                <span class="message-time">${time}${isOutgoing ? (msg.sent_by ? ` · ${msg.sent_by}` : '') : ''}</span>
              </div>
            </div>
          `;
        });
      });
      
      chatMessages.innerHTML = html;
      
      // Scroll al final
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Enviar un mensaje
    async function sendMessage() {
      if (!messageInput || !chatMessages) return;
      
      const message = messageInput.value.trim();
      
      if (!message || !currentPhone) return;
      
      // Limpiar campo de entrada
      messageInput.value = '';
      
      try {
        // Optimistic UI update
        const now = new Date();
        const timeString = formatMessageTime(now);
        
        const messageHtml = `
          <div class="message outgoing">
            <div class="message-content">
              <p>${formatMessageText(message)}</p>
              <span class="message-time">${timeString} · Enviando...</span>
            </div>
          </div>
        `;
        
        // Añadir mensaje a la UI
        chatMessages.insertAdjacentHTML('beforeend', messageHtml);
        
        // Scroll al final
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Obtener token de sesión
        const token = getAuthToken();
        
        // Enviar mensaje al servidor
        const response = await fetch(`${API_URL}/send`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            phone: currentPhone,
            message: message
          })
        });
        
        if (!response.ok) throw new Error(`Error al enviar mensaje: ${response.status}`);
        
        const data = await response.json();
        
        if (data.success) {
          // Actualizar UI con mensaje enviado exitosamente
          const lastMessage = chatMessages.lastElementChild;
          if (lastMessage) {
            const timeElement = lastMessage.querySelector('.message-time');
            if (timeElement) {
              timeElement.textContent = `${timeString} · Enviado`;
            }
          }
        } else {
          console.error('Error en respuesta:', data.error);
          // Marcar mensaje como fallido
          const lastMessage = chatMessages.lastElementChild;
          if (lastMessage) {
            const timeElement = lastMessage.querySelector('.message-time');
            if (timeElement) {
              timeElement.textContent = `${timeString} · Error al enviar`;
            }
            lastMessage.classList.add('error');
          }
        }
      } catch (error) {
        console.error('Error al enviar mensaje:', error);
        // Marcar mensaje como fallido
        const lastMessage = chatMessages.lastElementChild;
        if (lastMessage) {
          const timeElement = lastMessage.querySelector('.message-time');
          if (timeElement) {
            timeElement.textContent = `${timeString} · Error al enviar`;
          }
          lastMessage.classList.add('error');
        }
      }
    }
    
    // Filtrar conversaciones
    function filterConversations() {
      if (!searchInput) return;
      
      const items = document.querySelectorAll('.conversation-item');
      const searchTerm = searchInput.value.toLowerCase();
      
      items.forEach(item => {
        const name = item.querySelector('h4')?.textContent.toLowerCase() || '';
        const phone = item.getAttribute('data-phone')?.toLowerCase() || '';
        const lastMessage = item.querySelector('.last-message')?.textContent.toLowerCase() || '';
        
        if (name.includes(searchTerm) || phone.includes(searchTerm) || lastMessage.includes(searchTerm)) {
          item.style.display = 'flex';
        } else {
          item.style.display = 'none';
        }
      });
    }
    
    // Aplicar filtro a conversaciones
    function applyConversationFilter(filter) {
      // Recargar conversaciones para aplicar filtro
      loadConversations();
    }
    
    // Cargar agentes para asignación
    function loadAgents() {
      if (!agentSelector) return;
      
      // En una implementación real, esto cargaría desde la API
      // Aquí usamos datos de ejemplo estáticos
      const agents = [
        { id: 'agent1', name: 'Juan Pérez' },
        { id: 'agent2', name: 'María García' },
        { id: 'agent3', name: 'Carlos López' },
      ];
      
      agentSelector.innerHTML = '<option value="">Seleccionar agente...</option>' +
        agents.map(agent => `<option value="${agent.id}">${agent.name}</option>`).join('');
    }
    
    // Asignar conversación
    async function assignConversation(phone, agentId) {
      try {
        // En una implementación real, esto sería una llamada API
        console.log(`Asignando conversación ${phone} al agente ${agentId}`);
        
        // Obtener token de sesión
        const token = getAuthToken();
        
        // Simulamos una asignación exitosa y recargamos
        setTimeout(() => {
          loadConversations();
          loadConversation(phone);
        }, 500);
      } catch (error) {
        console.error('Error al asignar conversación:', error);
      }
    }
    
    // Actualizar estado de conversación
    async function updateConversationStatus(phone, status) {
      try {
        // En una implementación real, esto sería una llamada API
        console.log(`Actualizando estado de conversación ${phone} a ${status}`);
        
        // Obtener token de sesión
        const token = getAuthToken();
        
        // Simulamos una actualización exitosa y recargamos
        setTimeout(() => {
          loadConversations();
        }, 500);
      } catch (error) {
        console.error('Error al actualizar estado:', error);
      }
    }
    
    // Iniciar temporizador de refresco
    function startRefreshTimer() {
      clearInterval(refreshTimer);
      refreshTimer = setInterval(() => {
        loadConversations();
        
        // Si hay una conversación activa, también refrescarla
        if (currentPhone) {
          loadConversation(currentPhone);
        }
      }, REFRESH_INTERVAL);
    }
    
    // Obtener token de autenticación
    function getAuthToken() {
      // Implementar según tu sistema de autenticación
      // Por ejemplo, obtener de localStorage, cookie, etc.
      // return localStorage.getItem('authToken');
      
      // Para pruebas, devolver un token de ejemplo
      return 'example_token';
    }
    
    // Utilitarios
    
    // Formatear texto de mensaje (por ejemplo, manejar enlaces, emojis, etc.)
    function formatMessageText(text) {
      if (!text) return '';
      
      // Convertir URLs en enlaces
      const urlRegex = /(https?:\/\/[^\s]+)/g;
      return text.replace(urlRegex, url => `<a href="${url}" target="_blank" rel="noopener noreferrer">${url}</a>`);
    }
    
    // Formatear hora de mensaje
    function formatMessageTime(date) {
      if (!date) return '';
      
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(yesterday.getDate() - 1);
      
      const isToday = date.toDateString() === now.toDateString();
      const isYesterday = date.toDateString() === yesterday.toDateString();
      
      const hours = date.getHours().toString().padStart(2, '0');
      const minutes = date.getMinutes().toString().padStart(2, '0');
      const time = `${hours}:${minutes}`;
      
      if (isToday) {
        return time;
      } else if (isYesterday) {
        return `Ayer, ${time}`;
      } else {
        // Formato corto para fechas anteriores
        const day = date.getDate().toString().padStart(2, '0');
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        return `${day}/${month}, ${time}`;
      }
    }
    
    // Agrupar mensajes por fecha
    function groupMessagesByDate(messages) {
      const groups = {};
      
      messages.forEach(msg => {
        const date = new Date(msg.timestamp);
        const dateString = formatDateHeader(date);
        
        if (!groups[dateString]) {
          groups[dateString] = [];
        }
        
        groups[dateString].push(msg);
      });
      
      return groups;
    }
    
    // Formatear encabezado de fecha
    function formatDateHeader(date) {
      if (!date) return '';
      
      const now = new Date();
      const yesterday = new Date(now);
      yesterday.setDate(yesterday.getDate() - 1);
      
      const isToday = date.toDateString() === now.toDateString();
      const isYesterday = date.toDateString() === yesterday.toDateString();
      
      if (isToday) {
        return 'Hoy';
      } else if (isYesterday) {
        return 'Ayer';
      } else {
        const options = { weekday: 'long', day: 'numeric', month: 'long', year: 'numeric' };
        return date.toLocaleDateString('es-ES', options);
      }
    }
    
    // Formatear número de teléfono
    function formatPhone(phone) {
      if (!phone) return '';
      
      // Eliminar el símbolo + si existe
      let formatted = phone.startsWith('+') ? phone.substring(1) : phone;
      
      // Formato básico con paréntesis para código de país
      if (formatted.length >= 10) {
        const countryCode = formatted.substring(0, formatted.length - 10);
        const areaCode = formatted.substring(formatted.length - 10, formatted.length - 7);
        const firstPart = formatted.substring(formatted.length - 7, formatted.length - 4);
        const secondPart = formatted.substring(formatted.length - 4);
        
        return `(+${countryCode}) ${areaCode} ${firstPart} ${secondPart}`;
      }
      
      return `+${formatted}`;
    }
    
    // Truncar texto
    function truncateText(text, maxLength) {
      if (!text) return '';
      return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
    }
  </script>

  <style>
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .page-title {
      margin-bottom: 20px;
      color: #333;
    }
    
    .whatsapp-admin {
      display: flex;
      width: 100%;
      height: 700px;
      max-height: 80vh;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      font-family: Arial, sans-serif;
      background: #f5f5f5;
    }
    
    /* Sidebar */
    .sidebar {
      width: 320px;
      background: #fff;
      border-right: 1px solid #e0e0e0;
      display: flex;
      flex-direction: column;
    }
    
    .sidebar-header {
      padding: 16px;
      border-bottom: 1px solid #e0e0e0;
    }
    
    .sidebar-header h2 {
      margin: 0 0 12px 0;
      font-size: 18px;
      color: #333;
    }
    
    .search-container {
      display: flex;
      align-items: center;
    }
    
    .search-container input {
      flex: 1;
      padding: 8px 12px;
      border: 1px solid #e0e0e0;
      border-radius: 20px;
      font-size: 14px;
      outline: none;
    }
    
    .search-container input:focus {
      border-color: #25D366;
    }
    
    #refresh-btn {
      background: none;
      border: none;
      margin-left: 8px;
      cursor: pointer;
      color: #666;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    #refresh-btn:hover {
      background: #f0f0f0;
      color: #333;
    }
    
    #refresh-btn.rotating svg {
      animation: rotate 0.5s linear;
    }
    
    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    .conversation-filters {
      display: flex;
      padding: 8px 12px;
      border-bottom: 1px solid #e0e0e0;
      gap: 8px;
      overflow-x: auto;
      flex-wrap: nowrap;
    }
    
    .conversation-filters button {
      background: none;
      border: none;
      padding: 6px 12px;
      border-radius: 16px;
      font-size: 13px;
      color: #666;
      cursor: pointer;
      white-space: nowrap;
    }
    
    .conversation-filters button.active {
      background: #e6f7ef;
      color: #25D366;
      font-weight: 500;
    }
    
    .conversation-filters button:hover:not(.active) {
      background: #f0f0f0;
    }
    
    .conversation-list {
      flex: 1;
      overflow-y: auto;
    }
    
    .conversation-item {
      display: flex;
      padding: 12px 16px;
      border-bottom: 1px solid #f0f0f0;
      cursor: pointer;
      transition: background 0.2s;
    }
    
    .conversation-item:hover {
      background: #f9f9f9;
    }
    
    .conversation-item.active {
      background: #e6f7ef;
    }
    
    .conversation-item.needs-attention {
      border-left: 3px solid #ff9800;
    }
    
    .conversation-item.new {
      border-left: 3px solid #25D366;
    }
    
    .conversation-item.in-progress {
      border-left: 3px solid #2196f3;
    }
    
    .conversation-item.resolved {
      border-left: 3px solid #9e9e9e;
    }
    
    .avatar {
      width: 48px;
      height: 48px;
      border-radius: 50%;
      background: #e0e0e0;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 12px;
      flex-shrink: 0;
    }
    
    .avatar span {
      font-size: 20px;
      font-weight: 500;
      color: #666;
    }
    
    .conversation-info {
      flex: 1;
      min-width: 0; /* Para que el texto se trunque correctamente */
    }
    
    .conversation-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 4px;
    }
    
    .conversation-header h4 {
      margin: 0;
      font-size: 15px;
      font-weight: 500;
      color: #333;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    
    .time {
      font-size: 12px;
      color: #999;
      white-space: nowrap;
    }
    
    .last-message {
      margin: 0;
      font-size: 13px;
      color: #666;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      margin-bottom: 4px;
    }
    
    .conversation-meta {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    
    .phone {
      font-size: 12px;
      color: #999;
    }
    
    .assigned-badge {
      background: #e0e0e0;
      color: #666;
      padding: 2px 6px;
      border-radius: 10px;
      font-size: 11px;
    }
    
    .loading-placeholder,
    .empty-list,
    .error-state {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 32px 16px;
      text-align: center;
    }
    
    .spinner {
      width: 24px;
      height: 24px;
      border: 2px solid #e0e0e0;
      border-top-color: #25D366;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 12px;
    }
    
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    
    .loading-placeholder p,
    .empty-list p,
    .error-state p {
      margin: 0;
      color: #999;
      font-size: 14px;
    }
    
    #retry-btn {
      margin-top: 12px;
      padding: 6px 12px;
      background: #25D366;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    
    /* Chat container */
    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: #f5f5f5;
      position: relative;
    }
    
    .empty-state {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      text-align: center;
      padding: 20px;
      background: #f9f9f9;
    }
    
    .empty-state.hidden {
      display: none;
    }
    
    .empty-state-icon {
      color: #25D366;
      margin-bottom: 16px;
    }
    
    .empty-state h3 {
      margin: 0 0 8px 0;
      font-size: 20px;
      color: #333;
    }
    
    .empty-state p {
      margin: 0;
      color: #666;
      font-size: 15px;
    }
    
    .chat-view {
      display: flex;
      flex-direction: column;
      height: 100%;
    }
    
    .chat-view.hidden {
      display: none;
    }
    
    .chat-header {
      padding: 12px 16px;
      border-bottom: 1px solid #e0e0e0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: white;
    }
    
    .chat-contact-info {
      display: flex;
      align-items: center;
    }
    
    .contact-avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background: #e0e0e0;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-right: 12px;
    }
    
    .contact-avatar span {
      font-size: 18px;
      font-weight: 500;
      color: #666;
    }
    
    .contact-details h3 {
      margin: 0 0 2px 0;
      font-size: 16px;
      color: #333;
    }
    
    .contact-details p {
      margin: 0;
      font-size: 13px;
      color: #666;
    }
    
    .chat-actions {
      display: flex;
      gap: 8px;
    }
    
    #status-selector {
      padding: 6px 12px;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      font-size: 14px;
      background: white;
    }
    
    #assign-btn {
      width: 32px;
      height: 32px;
      border: none;
      background: #f0f0f0;
      border-radius: 4px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #666;
    }
    
    #assign-btn:hover {
      background: #e0e0e0;
      color: #333;
    }
    
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 16px;
      display: flex;
      flex-direction: column;
    }
    
    .message-date-separator {
      text-align: center;
      margin: 16px 0;
      position: relative;
    }
    
    .message-date-separator::before {
      content: '';
      position: absolute;
      left: 0;
      top: 50%;
      width: 100%;
      height: 1px;
      background: #e0e0e0;
      z-index: 1;
    }
    
    .message-date-separator span {
      background: #f5f5f5;
      padding: 0 12px;
      font-size: 12px;
      color: #999;
      position: relative;
      z-index: 2;
    }
    
    .message {
      max-width: 70%;
      margin-bottom: 8px;
      display: flex;
    }
    
    .message.incoming {
      align-self: flex-start;
    }
    
    .message.outgoing {
      align-self: flex-end;
    }
    
    .message-content {
      padding: 10px 12px;
      border-radius: 12px;
      position: relative;
    }
    
    .message.incoming .message-content {
      background: white;
      border-top-left-radius: 0;
    }
    
    .message.outgoing .message-content {
      background: #dcf8c6;
      border-top-right-radius: 0;
    }
    
    .message-content p {
      margin: 0 0 4px 0;
      font-size: 14px;
      line-height: 1.4;
      color: #333;
      word-break: break-word;
    }
    
    .message-content a {
      color: #2196f3;
      text-decoration: none;
    }
    
    .message-time {
      font-size: 11px;
      color: #999;
      display: block;
      text-align: right;
    }
    
    .message.error .message-content {
      background: #ffebee;
    }
    
    .chat-input {
      padding: 12px 16px;
      border-top: 1px solid #e0e0e0;
      display: flex;
      align-items: center;
      background: white;
    }
    
    #message-input {
      flex: 1;
      border: 1px solid #e0e0e0;
      border-radius: 24px;
      padding: 10px 16px;
      font-size: 14px;
      max-height: 100px;
      min-height: 40px;
      resize: none;
      outline: none;
    }
    
    .input-actions {
      margin-left: 12px;
    }
    
    #send-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      border: none;
      background: #25D366;
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: transform 0.2s;
    }
    
    #send-btn:hover {
      transform: scale(1.05);
    }
    
    /* Modal de asignación */
    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      visibility: hidden;
      opacity: 0;
      transition: visibility 0s linear 0.25s, opacity 0.25s;
    }
    
    .modal.show {
      visibility: visible;
      opacity: 1;
      transition-delay: 0s;
    }
    
    .modal-content {
      background: white;
      width: 400px;
      max-width: 90%;
      border-radius: 8px;
      overflow: hidden;
    }
    
    .modal-header {
      padding: 16px;
      border-bottom: 1px solid #e0e0e0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .modal-header h3 {
      margin: 0;
      font-size: 18px;
      color: #333;
    }
    
    .modal-close {
      background: none;
      border: none;
      font-size: 24px;
      line-height: 1;
      cursor: pointer;
      color: #999;
    }
    
    .modal-body {
      padding: 16px;
    }
    
    .modal-body p {
      margin: 0 0 12px 0;
      font-size: 14px;
      color: #666;
    }
    
    #agent-selector {
      width: 100%;
      padding: 8px;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      font-size: 14px;
    }
    
    .modal-footer {
      padding: 16px;
      border-top: 1px solid #e0e0e0;
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
    
    .cancel-btn {
      padding: 8px 16px;
      background: none;
      border: 1px solid #e0e0e0;
      border-radius: 4px;
      font-size: 14px;
      cursor: pointer;
    }
    
    .confirm-btn {
      padding: 8px 16px;
      background: #25D366;
      color: white;
      border: none;
      border-radius: 4px;
      font-size: 14px;
      cursor: pointer;
    }
    
    /* Responsive */
    @media (max-width: 768px) {
      .whatsapp-admin {
        flex-direction: column;
        height: 100vh;
        max-height: 100vh;
        border-radius: 0;
      }
      
      .sidebar {
        width: 100%;
        height: 50%;
        border-right: none;
        border-bottom: 1px solid #e0e0e0;
      }
      
      .chat-container {
        height: 50%;
      }
      
      .empty-state {
        display: none;
      }
      
      .chat-view {
        display: flex;
      }
    }
  </style>
</body>
</html>
